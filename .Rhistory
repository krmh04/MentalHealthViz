colour = "white") +
# flip the X and Y axes
coord_flip() +
# adjust counts-axis scale
scale_y_continuous(limits = c(-600, 900),
breaks = seq(-600,900,100),
labels = abs(seq(-600, 900, 100)))
ggplotly(p)
p<-ggplot(mapping = aes(x = Age_Group, fill = Gender)) +
geom_col(data = pyramid_df_female,
breaks = seq(0,85,5),
mapping = aes(y =count),
colour = "white") +
# male histogram (values converted to negative)
geom_col(data = pyramid_df_male,
breaks = seq(0,85,5),
mapping = aes(y =count),
colour = "white") +
# flip the X and Y axes
coord_flip() +
# adjust counts-axis scale
scale_y_continuous(limits = c(-600, 900),
breaks = seq(-600,900,100),
labels = abs(seq(-600, 900, 100)))
ggplotly(p)
pyramid_df %>% plot_ly(x = ~ifelse(Gender == "Male", -count, count), y = ~Age_Group, color = ~Gender, colors = c("#CC6699", "#0087FF")) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~paste("Country:", Country, "\nGender:", Gender, "\nCount:", count)) %>%
layout(barmode = 'overla
pyramid_df %>% plot_ly(x = ~ifelse(Gender == "Male", -count, count), y = ~Age_Group, color = ~Gender, colors = c("#CC6699", "#0087FF")) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~paste("Country:", Country, "\nGender:", Gender, "\nCount:", count)) %>%
p<-ggplot(mapping = aes(x = Age_Group, fill = Gender)) +
geom_col(data = pyramid_df_female,
breaks = seq(0,85,5),
mapping = aes(y =count),
colour = "white") +
# male histogram (values converted to negative)
geom_col(data = pyramid_df_male,
breaks = seq(0,85,5),
mapping = aes(y =count),
colour = "white") +
# flip the X and Y axes
coord_flip() +
# adjust counts-axis scale
scale_y_continuous(limits = c(-600, 900),
breaks = seq(-600,900,100),
labels = abs(seq(-600, 900, 100)))
ggplotly(p)
p<-ggplot(mapping = aes(x = Age_Group, fill = Gender)) +
geom_col(data = pyramid_df_female,
mapping = aes(y =count),
colour = "white") +
# male histogram (values converted to negative)
geom_col(data = pyramid_df_male,
mapping = aes(y =count),
colour = "white") +
# flip the X and Y axes
coord_flip() +
ggplotly(p)
ggplot(mapping = aes(x = Age_Group, fill = Gender)) +
geom_col(data = pyramid_df_female,
mapping = aes(y =count),
colour = "white") +
# male histogram (values converted to negative)
geom_col(data = pyramid_df_male,
mapping = aes(y =count),
colour = "white") +
# flip the X and Y axes
coord_flip()
ggplot(mapping = aes(x = Age_Group, fill = Gender)) +
geom_col(data = pyramid_df_female,
breaks = seq(0,85,5),
mapping = aes(y =count),
colour = "white") +
# male histogram (values converted to negative)
geom_col(data = pyramid_df_male,
breaks = seq(0,85,5),
mapping = aes(y =count),
colour = "white") +
# flip the X and Y axes
coord_flip()
plot_ly(x = ~ifelse(Gender == "Male", -count, count), y = ~Country, color = ~Gender,
colors = c("#CC6699", "#0087FF")) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~paste("Country:", Country, "\nGender:",
Gender, "\nCount:", count)) %>%
layout(barmode = 'overlay', height = 1200, font = list(family = "Source Sans Pro", size = 12),
yaxis = list(title = ''), xaxis = list(title = 'Count of men vs. women who participated in this survey', range = c(-max_count, max_count), tickformat = ',~s', tickmode = 'array', tickvals = seq(-max_count, max_count, length.out = 9), ticktext = abs(seq(-max_count, max_count, length.out = 9))))
max_count <- max(pyramid_df$count)
plot_ly(x = ~ifelse(Gender == "Male", -count, count), y = ~Country, color = ~Gender,
colors = c("#CC6699", "#0087FF")) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~paste("Country:", Country, "\nGender:",
Gender, "\nCount:", count)) %>%
layout(barmode = 'overlay', height = 1200, font = list(family = "Source Sans Pro", size = 12),
yaxis = list(title = ''), xaxis = list(title = 'Count of men vs. women who participated in this survey', range = c(-max_count, max_count), tickformat = ',~s', tickmode = 'array', tickvals = seq(-max_count, max_count, length.out = 9), ticktext = abs(seq(-max_count, max_count, length.out = 9))))
View(pyramid_df)
pyramid_df %>% plot_ly(x = ~ifelse(Gender == "Male", -count, count), y = ~Country, color = ~Gender,
colors = c("#CC6699", "#0087FF")) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~paste("Country:", Country, "\nGender:",
Gender, "\nCount:", count)) %>%
layout(barmode = 'overlay', height = 1200, font = list(family = "Source Sans Pro", size = 12),
yaxis = list(title = ''), xaxis = list(title = 'Count of men vs. women who participated in this survey', range = c(-max_count, max_count), tickformat = ',~s', tickmode = 'array', tickvals = seq(-max_count, max_count, length.out = 9), ticktext = abs(seq(-max_count, max_count, length.out = 9))))
pyramid_df %>% plot_ly(x = ~ifelse(Gender == "Male", -count, count), y = ~Age_Group, color = ~Gender,
colors = c("#CC6699", "#0087FF")) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~paste("Country:", Country, "\nGender:",
Gender, "\nCount:", count)) %>%
layout(barmode = 'overlay', height = 1200, font = list(family = "Source Sans Pro", size = 12),
yaxis = list(title = ''), xaxis = list(title = 'Count of men vs. women who participated in this survey', range = c(-max_count, max_count), tickformat = ',~s', tickmode = 'array', tickvals = seq(-max_count, max_count, length.out = 9), ticktext = abs(seq(-max_count, max_count, length.out = 9))))
pyramid_df %>% plot_ly(x = ~ifelse(Gender == "Male", -count, count), y = ~Age_Group, color = ~Gender,
colors = c("#CC6699", "#0087FF")) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~paste("Country:", Age_Group, "\nGender:",
Gender, "\nCount:", count)) %>%
layout(barmode = 'overlay', height = 1200, font = list(family = "Source Sans Pro", size = 12),
yaxis = list(title = ''), xaxis = list(title = 'Count of men vs. women who participated in this survey', range = c(-max_count, max_count), tickformat = ',~s', tickmode = 'array', tickvals = seq(-max_count, max_count, length.out = 9), ticktext = abs(seq(-max_count, max_count, length.out = 9))))
pyramid_df %>% plot_ly(x = ~ifelse(Gender == "Male", -count, count), y = ~Age_Group, color = ~Gender,
colors = c("#CC6699", "#0087FF")) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~paste("Country:", Age_Group, "\nGender:",
Gender, "\nCount:", count)) %>%
layout(barmode = 'overlay', font = list(family = "Source Sans Pro"),
yaxis = list(title = ''), xaxis = list(title = 'Count of men vs. women who participated in this survey', range = c(-max_count, max_count), tickformat = ',~s', tickmode = 'array', tickvals = seq(-max_count, max_count, length.out = 9), ticktext = abs(seq(-max_count, max_count, length.out = 9))))
pyramid_df %>% plot_ly(x = ~ifelse(Gender == "Male", -count, count), y = ~Age_Group, color = ~Gender,
colors = c("#CC6699", "#0087FF")) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~paste("Country:", Age_Group, "\nGender:",
Gender, "\nCount:", count)) %>%
layout(barmode = 'overlay', font = list(family = "Source Sans Pro"), xaxis = list(title = 'Count of men vs. women who participated in this survey', range = c(-max_count, max_count), tickformat = ',~s', tickmode = 'array', tickvals = seq(-max_count, max_count, length.out = 9), ticktext = abs(seq(-max_count, max_count, length.out = 9))))
pyramid_df %>% plot_ly(x = ~ifelse(Gender == "Male", -count, count), y = ~Age_Group, color = ~Gender,
colors = c("#CC6699", "#0087FF"))  %>%
layout(barmode = 'overlay', font = list(family = "Source Sans Pro"), xaxis = list(title = 'Count of men vs. women who participated in this survey', range = c(-max_count, max_count), tickformat = ',~s', tickmode = 'array', tickvals = seq(-max_count, max_count, length.out = 9), ticktext = abs(seq(-max_count, max_count, length.out = 9))))
pyramid_df %>% plot_ly(x = ~ifelse(Gender == "Male", -count, count), y = ~Age_Group, color = ~Gender,
colors = c("#CC6699", "#0087FF")) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~paste("\nGender:",
Gender, "\nCount:", count)) %>%
layout(barmode = 'overlay', font = list(family = "Source Sans Pro"), xaxis = list(title = 'Count of men vs. women who participated in this survey', range = c(-max_count, max_count), tickformat = ',~s', tickmode = 'array', tickvals = seq(-max_count, max_count, length.out = 9), ticktext = abs(seq(-max_count, max_count, length.out = 9))))
pyramid_df %>% plot_ly(x = ~ifelse(Gender == "Male", -count, count), y = ~Age_Group, color = ~Gender,
colors = c("#CC6699", "#0087FF")) %>%
add_bars(orientation = 'h') %>%
layout(barmode = 'overlay', font = list(family = "Source Sans Pro"), xaxis = list(title = 'Count of men vs. women who participated in this survey', range = c(-max_count, max_count), tickformat = ',~s', tickmode = 'array', tickvals = seq(-max_count, max_count, length.out = 9), ticktext = abs(seq(-max_count, max_count, length.out = 9))))
shiny::runApp('F:/PE & RE Electives Semester-3/nfhs5Viz')
runApp('F:/PE & RE Electives Semester-3/nfhs5Viz')
library(dplyr)
library(readxl)
library(tidyverse)
library(tidygeocoder)
library(pyramid)
library(plotly)
glp <- read.csv("F:/PE & RE Electives Semester-3/nfhs5Viz/Main_GLP.csv")
glp <- glp %>%
rename(anxiety = 'C1_6', depression = 'C1_4', loneliness = 'C1_1')
glp <- glp %>% group_by(Country) %>%
summarize(count = n())
View(glp)
glp <- read.csv("F:/PE & RE Electives Semester-3/nfhs5Viz/Main_GLP.csv")
glp <- glp %>% group_by(Gender,Country) %>%
summarize(count = n())
View(glp)
glp <- glp %>% group_by(Country,Gender) %>%
summarize(count = n())
View(glp)
glp <- read.csv("F:/PE & RE Electives Semester-3/nfhs5Viz/Main_GLP.csv")
pyramid_df <- glp %>%
group_by(Country,Gender) %>%
summarize(count = n())
pyramid_df <- pyramid_df %>% pivot_wider(names_from = `Gender`, values_from =count)
View(pyramid_df)
pyramid_df <- pyramid_df %>% pivot_wider(names_from = `Gender`, values_from =count) |> mutate(sumindex = sum(c_across(c(1:4, 5)), na.rm = T))
glp <- read.csv("F:/PE & RE Electives Semester-3/nfhs5Viz/Main_GLP.csv")
pyramid_df <- glp %>%
group_by(Country,Gender) %>%
summarize(count = n())
pyramid_df <- pyramid_df %>% pivot_wider(names_from = `Gender`, values_from =count) |> mutate(sumindex = sum(c_across(c(1:4, 5)), na.rm = T))
View(pyramid_df)
pyramid_df <- pyramid_df %>% pivot_wider(names_from = `Gender`, values_from =count) |> mutate(sumindex = sum(c_across(c(1:4)), na.rm = T))
View(pyramid_df)
countries <- read_sf('F:/PE & RE Electives Semester-3/nfhs5Viz/Shapefiles/copy_4.shp')
m <- leaflet() %>%
addProviderTiles(providers$CartoDB.PositronNoLabels)  %>%
setView(lng = -96.25, lat = 39.50, zoom = 4) %>%
addPolygons(data = states,
weight = 1)
countries <- read_sf('F:/PE & RE Electives Semester-3/nfhs5Viz/Shapefiles/copy_4.shp')
m <- leaflet() %>%
addProviderTiles(providers$CartoDB.PositronNoLabels)  %>%
setView(lng = -96.25, lat = 39.50, zoom = 4) %>%
addPolygons(data = countries,
weight = 1)
m
View(countries)
countries <- read_sf('F:/PE & RE Electives Semester-3/nfhs5Viz/Shapefiles/copy_4.shp')
countries <- countries %>% rename(Country = NAME_LONG)
glp <- read.csv("F:/PE & RE Electives Semester-3/nfhs5Viz/Main_GLP.csv")
glp_total <- glp %>%
group_by(Country) %>%
summarize(count = n())
is.element(glp_total$Country, countries$Country) %>%
all()
countries <- merge(countries, glp_total, by = 'Country', all.x = F)
View(glp_total)
paletteNum <- colorNumeric('Blues', domain = countries$count)
m <- leaflet() %>%
addProviderTiles(providers$CartoDB.PositronNoLabels)  %>%
setView(lng = 78.9629, lat = 20.5937, zoom = 4) %>%
addPolygons(data = countries,
# state border stroke color
color = 'black',
# soften the weight of the state borders
weight = 1,
# values >1 simplify the polygons' lines for less detail but faster loading
smoothFactor = .3,
# set opacity of polygons
fillOpacity = .75,
# specify that the each state should be colored per paletteNum()
fillColor = ~paletteNum(countries$count))
m
costBins <- c(500:1200, Inf)
paletteBinned <- colorBin('YlGnBu', domain = countries$count, bins = costBins)
m <- leaflet() %>%
addProviderTiles(providers$CartoDB.PositronNoLabels)  %>%
setView(lng = 78.9629, lat = 20.5937, zoom = 4) %>%
addPolygons(data = countries,
# state border stroke color
color = 'black',
# soften the weight of the state borders
weight = 1,
# values >1 simplify the polygons' lines for less detail but faster loading
smoothFactor = .3,
# set opacity of polygons
fillOpacity = .75,
# specify that the each state should be colored per paletteNum()
fillColor = ~paletteBinned(countries$count))
costBins <- c(500, 600,800, 1000,1100, 1200, Inf)
paletteBinned <- colorBin('YlGnBu', domain = countries$count, bins = costBins)
m <- leaflet() %>%
addProviderTiles(providers$CartoDB.PositronNoLabels)  %>%
setView(lng = 78.9629, lat = 20.5937, zoom = 4) %>%
addPolygons(data = countries,
# soften the weight of the state borders
weight = 1,
# values >1 simplify the polygons' lines for less detail but faster loading
smoothFactor = .3,
# set opacity of polygons
fillOpacity = .75,
# specify that the each state should be colored per paletteNum()
fillColor = ~paletteBinned(countries$count))
m
library(RColorBrewer)
m <- leaflet() %>%
addProviderTiles(providers$CartoDB.PositronNoLabels)  %>%
setView(lng = 78.9629, lat = 20.5937, zoom = 4) %>%
addPolygons(data = countries,
# soften the weight of the state borders
weight = 1,
# values >1 simplify the polygons' lines for less detail but faster loading
smoothFactor = .3,
# set opacity of polygons
fillOpacity = .75,
# specify that the each state should be colored per paletteNum()
fillColor = ~paletteBinned(countries$count))
m
costBins <- c(500, 600,800, 1000,1100, 1200, Inf)
paletteBinned <- colorBin('OrRd', domain = countries$count, bins = costBins)
m <- leaflet() %>%
addProviderTiles(providers$CartoDB.PositronNoLabels)  %>%
setView(lng = 78.9629, lat = 20.5937, zoom = 4) %>%
addPolygons(data = countries,
# soften the weight of the state borders
weight = 1,
# values >1 simplify the polygons' lines for less detail but faster loading
smoothFactor = .3,
# set opacity of polygons
fillOpacity = .75,
# specify that the each state should be colored per paletteNum()
fillColor = ~paletteBinned(countries$count))
m
View(countries)
print(countries(all.x=F))
missing_in_sf_df <- glp_total %>%
filter(!(Country %in% countries$Country))
View(missing_in_sf_df)
View(missing_in_sf_df)
glp_total <- glp_total %>%
mutate(Country = recode(Country,
"DRC" = "Democratic Republic of the Congo",
"Ivory Coast" = "Côte d'Ivoire",
"KSA" = "Saudi Arabia",
"Russia" = "Russian Federation",
"South Korea" = "Republic of Korea",
"UAE" = "United Arab Emirates",
"UK" = "United Kingdom",
"US" = "United States"))
is.element(glp_total$Country, countries$Country) %>%
all()
View(glp_total)
missing_in_sf_df <- glp_total %>%
filter(!(Country %in% countries$Country))
View(missing_in_sf_df)
View(glp_total)
missing_in_sf_df <- glp_total %>%
filter(!(Country %in% countries$Country))
View(missing_in_sf_df)
is.element(glp_total$Country, countries$Country) %>%
all()
library(dplyr)
library(readxl)
library(tidyverse)
library(tidygeocoder)
library(pyramid)
library(plotly)
library(RColorBrewer)
glp <- read.csv("F:/PE & RE Electives Semester-3/nfhs5Viz/Main_GLP.csv")
glp_total <- glp %>%
group_by(Country) %>%
summarize(count = n())
countries <- read_sf('F:/PE & RE Electives Semester-3/nfhs5Viz/Shapefiles/copy_4.shp')
countries <- countries %>% rename(Country = NAME_LONG)
glp_total <- glp_total %>%
mutate(Country = recode(Country,
"DRC" = "Democratic Republic of the Congo",
"Ivory Coast" = "Côte d'Ivoire",
"KSA" = "Saudi Arabia",
"Russia" = "Russian Federation",
"South Korea" = "Republic of Korea",
"UAE" = "United Arab Emirates",
"UK" = "United Kingdom",
"US" = "United States"))
missing_in_sf_df <- glp_total %>%
filter(!(Country %in% countries$Country))
View(missing_in_sf_df)
View(countries)
View(countries)
View(countries)
glp <- read.csv("F:/PE & RE Electives Semester-3/nfhs5Viz/Main_GLP.csv")
glp_total <- glp %>%
group_by(Country) %>%
summarize(count = n())
countries <- read_sf('F:/PE & RE Electives Semester-3/nfhs5Viz/Shapefiles/copy_4.shp')
glp_total <- glp_total %>%
mutate(Country = recode(Country,
"DRC" = "Democratic Republic of the Congo",
"Ivory Coast" = "C�te d'Ivoire",
"KSA" = "Saudi Arabia",
"Russia" = "Russian Federation",
"South Korea" = "Republic of Korea",
"UAE" = "United Arab Emirates",
"UK" = "United Kingdom",
"US" = "United States"))
missing_in_sf_df <- glp_total %>%
filter(!(Country %in% countries$Country))
is.element(glp_total$Country, countries$Country) %>%
all()
countries <- countries %>% rename(Country = NAME_LONG)
is.element(glp_total$Country, countries$Country) %>%
all()
missing_in_sf_df <- glp_total %>%
filter(!(Country %in% countries$Country))
View(missing_in_sf_df)
glp <- read.csv("F:/PE & RE Electives Semester-3/nfhs5Viz/Main_GLP.csv",encoding="UTF-8")
countries <- read_sf('F:/PE & RE Electives Semester-3/nfhs5Viz/Shapefiles/copy_4.shp',encoding="UTF-8")
countries <- read_sf('F:/PE & RE Electives Semester-3/nfhs5Viz/Shapefiles/copy_4.shp',options = "ENCODING=UTF-8")
View(countries)
countries <- read_sf('F:/PE & RE Electives Semester-3/nfhs5Viz/Shapefiles/copy_4.shp',options = "ENCODING=WINDOWS-1252")
View(countries)
countries <- countries %>% rename(Country = NAME_LONG)
countries <- countries %>% rename(Country = NAME_LONG)
glp <- read.csv("F:/PE & RE Electives Semester-3/nfhs5Viz/Main_GLP.csv",encoding="UTF-8")
glp_total <- glp %>%
group_by(Country) %>%
summarize(count = n())
countries <- read_sf('F:/PE & RE Electives Semester-3/nfhs5Viz/Shapefiles/copy_4.shp',options = "ENCODING=WINDOWS-1252")
countries <- countries %>% rename(Country = NAME_LONG)
is.element(glp_total$Country, countries$Country) %>%
all()
missing_in_sf_df <- glp_total %>%
filter(!(Country %in% countries$Country))
glp_total <- glp_total %>%
mutate(Country = recode(Country,
"DRC" = "Democratic Republic of the Congo",
"Ivory Coast" = "Côte d'Ivoire",
"KSA" = "Saudi Arabia",
"Russia" = "Russian Federation",
"South Korea" = "Republic of Korea",
"UAE" = "United Arab Emirates",
"UK" = "United Kingdom",
"US" = "United States"))
is.element(glp_total$Country, countries$Country) %>%
all()
runApp('F:/PE & RE Electives Semester-3/nfhs5Viz')
runApp('F:/PE & RE Electives Semester-3/nfhs5Viz')
runApp('F:/PE & RE Electives Semester-3/nfhs5Viz')
glp <- read.csv("F:/PE & RE Electives Semester-3/nfhs5Viz/Main_GLP.csv")
glp <- glp %>%
rename(anxiety = 'C1_6', depression = 'C1_4', loneliness = 'C1_1')
filtered_data <-
glp %>%
filter(Gender %in% c("Female", "Male")) %>%
group_by(Gender, Age_Group,anxiety,depression,loneliness) %>%
summarize(count = n(),) %>%
pivot_wider(names_from = Gender, values_from = count) %>%
mutate(Male = -Male)  # Make male counts negative
View(filtered_data)
filtered_data <-
glp %>%
filter(Gender %in% c("Female", "Male")) %>%
group_by(Gender, Age_Group,anxiety,depression,loneliness) %>%
summarize(count = n(),.groups = 'drop') %>%
pivot_wider(names_from = Gender, values_from = count) %>%
mutate(Male = -Male)  # Make male counts negative
View(filtered_data)
filtered_data <-
glp %>%
filter(Gender %in% c("Female", "Male")) %>%
group_by(Gender, Age_Group, anxiety, depression, loneliness) %>%
summarize(count = n(), .groups = 'drop') %>%  # Include .groups = 'drop' to ungroup after summarization
pivot_wider(names_from = Gender, values_from = count, values_fill = 0) # Fill missing values with 0
View(filtered_data)
View(filtered_data)
filtered_data <-
glp %>%
filter(Gender %in% c("Female", "Male")) %>%
group_by(Age_Group, anxiety, depression, loneliness) %>%
summarize(count = n(), .groups = 'drop') %>%  # Include .groups = 'drop' to ungroup after summarization
pivot_wider(names_from = Gender, values_from = count, values_fill = 0) # Fill missing values with 0
filtered_data <-
glp %>%
filter(Gender %in% c("Female", "Male")) %>%
group_by(Age_Group, anxiety, depression, loneliness) %>%
summarize(count = n(), .groups = 'drop') %>%  # Include .groups = 'drop' to ungroup after summarization
pivot_wider(names_from = Age_Group, values_from = count, values_fill = 0) # Fill missing values with 0
View(filtered_data)
glp_summary <- glp_indicators %>% group_by(Country,Gender,Age_Group) %>% summarise(across(anxiety:depression, ~ sum(. == "Yes"), .names = "count_{col}"))
glp_summary <- glp %>% group_by(Country,Gender,Age_Group) %>% summarise(across(anxiety:depression, ~ sum(. == "Yes"), .names = "count_{col}"))
View(glp_summary)
filtered_data <-
glp %>%
filter(Country == "India") %>%
filter(Gender %in% c("Female", "Male")) %>%
group_by(Gender, Age_Group) %>%
summarise(across(anxiety:depression, ~ sum(. == "Yes"), .names = "count_{col}"))  |>
pivot_wider(names_from = Gender, values_from = count) %>%
mutate(Male = -Male)  # Make male counts negative
filtered_data <-
glp %>%
filter(Country == "India") %>%
filter(Gender %in% c("Female", "Male")) %>%
group_by(Gender, Age_Group) %>%
summarise(across(anxiety:depression, ~ sum(. == "Yes"), .names = "count_{col}"))  |>
mutate(Male = -Male)  # Make male counts negative
filtered_data <-
glp %>%
filter(Country == "India") %>%
filter(Gender %in% c("Female", "Male")) %>%
group_by(Gender, Age_Group) %>%
summarise(across(anxiety:depression, ~ sum(. == "Yes"), .names = "count_{col}"))
View(filtered_data)
glp <- glp %>%
rename(anxiety = 'C1_6', depression = 'C1_4', loneliness = 'C1_1')
View(filtered_data)
filtered_data <-
glp %>%
filter(Country == "India") %>%
filter(Gender %in% c("Female", "Male")) %>%
group_by(Gender, Age_Group) %>%
summarise(across(anxiety:loneliness, ~ sum(. == "Yes"), .names = "count_{col}"))
View(filtered_data)
filtered_data <-
glp %>%
filter(Country == "India") %>%
filter(Gender %in% c("Female", "Male")) %>%
group_by(Gender, Age_Group) %>%
summarise(across(anxiety:loneliness, ~ sum(. == "Yes"), .names = "count_{col}")) |>
pivot_wider(names_from = Gender, values_from = "count_{col}")
filtered_data <-
glp %>%
filter(Country == "India") %>%
filter(Gender %in% c("Female", "Male")) %>%
group_by(Gender, Age_Group) %>%
summarise(across(anxiety:loneliness, ~ sum(. == "Yes"), .names = "count_{col}")) |>
pivot_wider(names_from = Gender, values_from = c(anxiety,depression, loneliness))
filtered_data <-
glp %>%
filter(Country == "India") %>%
filter(Gender %in% c("Female", "Male")) %>%
group_by(Gender, Age_Group) %>%
summarise(across(anxiety:loneliness, ~ sum(. == "Yes"), .names = "count_{col}")) |>
pivot_wider(names_from = Gender, values_from = c(count_anxiety,count_depression, count_loneliness))
View(filtered_data)
filtered_data <-
glp %>%
filter(Country == "Argentina") %>%
filter(Gender %in% c("Female", "Male")) %>%
group_by(Gender, Age_Group) %>%
summarise(across(anxiety:loneliness, ~ sum(. == "Yes"), .names = "count_{col}")) |>
pivot_wider(names_from = Gender, values_from = c(count_anxiety,count_depression, count_loneliness))
View(filtered_data)
filtered_data <-
glp %>%
filter(Country == "Argentina") %>%
filter(Gender %in% c("Female", "Male")) %>%
group_by(Gender, Age_Group) %>%
pivot_wider(names_from = Gender, values_from = c(anxiety,depression, loneliness))  |>
summarise(across(anxiety:loneliness, ~ sum(. == "Yes"), .names = "count_{col}"))
filtered_data <-
glp %>%
filter(Country == "Argentina") %>%
filter(Gender %in% c("Female", "Male")) %>%
group_by(Gender, Age_Group) %>%
summarise(across(anxiety:loneliness, ~ sum(. == "Yes"), .names = "count_{col}")) |>
pivot_wider(names_from = Gender, values_from = c(count_anxiety,count_depression, count_loneliness))
View(filtered_data)
runApp('F:/PE & RE Electives Semester-3/nfhs5Viz')
runApp('F:/PE & RE Electives Semester-3/nfhs5Viz')
runApp('F:/PE & RE Electives Semester-3/nfhs5Viz')
runApp('F:/PE & RE Electives Semester-3/nfhs5Viz')
runApp('F:/PE & RE Electives Semester-3/nfhs5Viz')
runApp('F:/PE & RE Electives Semester-3/nfhs5Viz')
